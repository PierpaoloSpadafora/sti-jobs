/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { JobDTO } from '../model/jobDTO';
import { MachineDTO } from '../model/machineDTO';
import { MachineTypeDTO } from '../model/machineTypeDTO';
import { ScheduleWithMachineDTO } from '../model/scheduleWithMachineDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class JsonControllerService {

    protected basePath = 'http://localhost:7001/sti-jobs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Export Job data to JSON
     * Export all Job data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportJob(observe?: 'body', reportProgress?: boolean): Observable<Array<JobDTO>>;
    public exportJob(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobDTO>>>;
    public exportJob(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobDTO>>>;
    public exportJob(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<JobDTO>>('get',`${this.basePath}/api/v1/json/exportJob`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download schedules as a JSON file
     * This method triggers the download of the schedules JSON file.
     * @param observe set whether or not to return the data Observable as the body, response or events.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadSchedules(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public downloadSchedules(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public downloadSchedules(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public downloadSchedules(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.request('get', `${this.basePath}/api/v1/json/download-schedules`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            responseType: 'blob',
            reportProgress: reportProgress
        });
    }

    /**
     * Export Job data to JSON
     * Export all Job data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportJobScheduledDueDate(observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduleWithMachineDTO>>;
    public exportJobScheduledDueDate(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledDueDate(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledDueDate(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ScheduleWithMachineDTO>>('get',`${this.basePath}/api/v1/json/export-job-scheduled-by-due-date`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export Job data to JSON
     * Export all Job data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportJobScheduledDuration(observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduleWithMachineDTO>>;
    public exportJobScheduledDuration(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledDuration(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledDuration(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ScheduleWithMachineDTO>>('get',`${this.basePath}/api/v1/json/export-job-scheduled-by-duration`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export Job data to JSON
     * Export all Job data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportJobScheduledPriority(observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduleWithMachineDTO>>;
    public exportJobScheduledPriority(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledPriority(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledPriority(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ScheduleWithMachineDTO>>('get',`${this.basePath}/api/v1/json/export-job-scheduled-by-priority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export Job data to JSON
     * Export all Job data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportJobScheduledRO(observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduleWithMachineDTO>>;
    public exportJobScheduledRO(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledRO(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduleWithMachineDTO>>>;
    public exportJobScheduledRO(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ScheduleWithMachineDTO>>('get',`${this.basePath}/api/v1/json/export-job-scheduled-ro`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export Machine data to JSON
     * Export all Machine data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMachine(observe?: 'body', reportProgress?: boolean): Observable<Array<MachineDTO>>;
    public exportMachine(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MachineDTO>>>;
    public exportMachine(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MachineDTO>>>;
    public exportMachine(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MachineDTO>>('get',`${this.basePath}/api/v1/json/exportMachine`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export MachineType data to JSON
     * Export all MachineType data to JSON.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMachineType(observe?: 'body', reportProgress?: boolean): Observable<Array<MachineTypeDTO>>;
    public exportMachineType(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MachineTypeDTO>>>;
    public exportMachineType(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MachineTypeDTO>>>;
    public exportMachineType(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MachineTypeDTO>>('get',`${this.basePath}/api/v1/json/exportMachineType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Import Job data from JSON
     * Import Job data into the system from JSON content.
     * @param body 
     * @param assigneeEmail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public importJob(body: Array<JobDTO>, assigneeEmail: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public importJob(body: Array<JobDTO>, assigneeEmail: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public importJob(body: Array<JobDTO>, assigneeEmail: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public importJob(body: Array<JobDTO>, assigneeEmail: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling importJob.');
        }

        if (assigneeEmail === null || assigneeEmail === undefined) {
            throw new Error('Required parameter assigneeEmail was null or undefined when calling importJob.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assigneeEmail !== undefined && assigneeEmail !== null) {
            queryParameters = queryParameters.set('assigneeEmail', <any>assigneeEmail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('post',`${this.basePath}/api/v1/json/importJob`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public importMachine(body: Array<MachineDTO>, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public importMachine(body: Array<MachineDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public importMachine(body: Array<MachineDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public importMachine(body: Array<MachineDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling importMachine.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('post',`${this.basePath}/api/v1/json/importMachine`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Import MachineType data from JSON
     * Import MachineType data into the system from JSON content.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public importMachineType(body: Array<MachineTypeDTO>, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public importMachineType(body: Array<MachineTypeDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public importMachineType(body: Array<MachineTypeDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public importMachineType(body: Array<MachineTypeDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling importMachineType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('post',`${this.basePath}/api/v1/json/importMachineType`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
